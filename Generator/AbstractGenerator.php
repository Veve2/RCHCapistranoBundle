<?php

/*
* This file is part of Chalasdev/CapistranoBundle.
*
* https://github.com/chalasr/CapistranoBundle
* Robin Chalas <robin.chalas@gmail.com>
*
*/

namespace Chalasdev\CapistranoBundle\Generator;

/**
 * Abstract class for generators.
 *
 * @author Robin Chalas <robin.chalas@gmail.com>
 */
abstract class AbstractGenerator implements GeneratorInterface
{
    /**
     * @var array
     */
    protected $parameters;

    /**
     * @var string
     */
    protected $path;

    /**
     * @var string
     */
    protected $name;

    /**
     * @var mixed
     */
    protected $file;

    /**
     * @var string
     */
    protected static $headersTemplate = '
###########################################################################
#          This file is generated by Chalasdev/CapistranoBundle           #
#                                                                         #
#               https://github.com/chalasr/CapistranoBundle               #
#                  Robin Chalas <robin.chalas@gmail.com>                  #
#                                                                         #
###########################################################################
';

    /**
     * Constructor.
     *
     * @param array  $parameters
     * @param string $path
     * @param string $name
     */
    public function __construct(array $parameters, $path, $name)
    {
        $this->parameters = $parameters;
        $this->path = sprintf('%s/../%s', $path, $name);
        $this->name = $name;
    }

    /**
     * Generates staging from parameters.
     */
    public function generate()
    {
        $this
            ->open()
            ->write()
            ->close()
        ;
    }

    /**
     * Open file at given path.
     */
    public function open()
    {
        $this->file = fopen($this->path, 'w');

        return $this;
    }

    /**
     * Writes in file.
     */
    abstract public function write();

    /**
     * Close generated file.
     */
    public function close()
    {
        fclose($this->file);

        return $this;
    }

    /**
     * Add license headers.
     *
     * @return string
     */
    public function addHeaders($generated)
    {
        return sprintf('%s%s%s', self::$headersTemplate, PHP_EOL, $generated);
    }

    /**
     * Get parameters.
     *
     * @return array
     */
    public function getParameters()
    {
        return $this->parameters;
    }

    /**
     * Get file path.
     *
     * @return string
     */
    public function getPath()
    {
        return $this->path;
    }

    /**
     * Get staging path.
     *
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }
}
